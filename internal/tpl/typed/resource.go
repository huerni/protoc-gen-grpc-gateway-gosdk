package typed

import "github.com/jaronnie/protoc-gen-grpc-gateway-gosdk/internal/vars"

type ResourceData struct {
	Gateways []*vars.Gateway

	IsWarpHTTPResponse bool     // is warped code,data,message
	GoImportPaths      []string // import path
	ScopeVersion       string   // corev1
	UpScopeVersion     string   // Corev1
	Resource           string   // credential
	UpResource         string   // Credential
}

var ResourceTpl = `
{{define "methodDefine"}}{{.FuncName}}({{if or .IsStreamServer .IsStreamClient .IsSpecified}}{{else}}ctx context.Context,{{end}}param *{{.ProtoRequestBody.RootPath}}.{{.ProtoRequestBody.Name}}) ({{if or .IsStreamServer .IsStreamClient .IsSpecified}}*rest.Request{{else}}*{{.HTTPResponseBody.RootPath}}.{{.HTTPResponseBody.Name}}{{end}}, error){{end}}
// Code generated by protoc-gen-grpc-gateway-gosdk. DO NOT EDIT.
// versions:
//    protoc-gen-grpc-gateway-gosdk {{getProtoToolsVersion "protoc-gen-grpc-gateway-gosdk"}}
// type: {{.Resource}}

package {{.ScopeVersion}}

import (
	{{range $v := .GoImportPaths | uniq}}"{{$v}}"
	{{end}}
)

type {{.UpResource}}Getter interface {
	{{.UpResource}}() {{.UpResource}}Interface
}

type {{.UpResource}}Interface interface {
	{{range $k, $v := .Gateways}}// {{.FuncName}} trans *{{.ProtoRequestBody.RootPath}}.{{.ProtoRequestBody.Name}} into *{{.HTTPResponseBody.RootPath}}.{{.HTTPResponseBody.Name}}
	// API {{$v.URL}} {{.Comments}}
	{{template "methodDefine" $v}}

	{{end}}
	{{.UpResource}}Expansion
}

type {{.Resource}}Client struct {
	client rest.Interface
}

func new{{.UpResource}}Client(c *{{.UpScopeVersion}}Client) *{{.Resource}}Client {
	return &{{.Resource}}Client{
		client: c.RESTClient(),
	}
}

{{range $k, $v := .Gateways}}func (x *{{$.Resource}}Client) {{template "methodDefine" $v}} {
	{{if or $v.IsStreamServer $v.IsStreamClient $v.IsSpecified}}request := x.client.Verb("{{$v.HTTPMethod}}").
		SubPath(
			"{{$v.URL}}",{{range $p := $v.PathParams}}
			rest.PathParam{Name: "{{$p.Name}}", Value: param.{{$p.GoName}}},{{end}}
		).
		Params({{if eq $v.HTTPRequestBody.BodyName "*"}}{{else}}{{range $q := $v.QueryParams}}
			rest.QueryParam{Name: "{{$q.Name}}", Value: param.{{$q.GoName}}},{{end}}{{end}}
		).
		Body({{if eq $v.HTTPRequestBody.BodyName ""}}nil{{else if eq $v.HTTPRequestBody.BodyName "*"}}param{{else if ne $v.HTTPMethod "GET"}}param.{{$v.HTTPRequestBody.GoBodyName}}{{else}}nil{{end}})

	return request, nil{{else}}var resp {{$v.HTTPResponseBody.RootPath}}.{{$v.HTTPResponseBody.Name}}
		err := x.client.Verb("{{$v.HTTPMethod}}").
		SubPath(
			"{{$v.URL}}",{{range $p := $v.PathParams}}
			rest.PathParam{Name: "{{$p.Name}}", Value: param.{{$p.GoName}}},{{end}}
		).
		Params({{if eq $v.HTTPRequestBody.BodyName "*"}}{{else}}{{range $q := $v.QueryParams}}
			rest.QueryParam{Name: "{{$q.Name}}", Value: param.{{$q.GoName}}},{{end}}{{end}}
		).
		Body({{if eq $v.HTTPRequestBody.BodyName ""}}nil{{else if eq $v.HTTPRequestBody.BodyName "*"}}param{{else if ne $v.HTTPMethod "GET"}}param.{{$v.HTTPRequestBody.GoBodyName}}{{else}}nil{{end}}).
		Do(ctx).
		Into(&resp, {{$.IsWarpHTTPResponse}})

	if err != nil {
		return nil, err
	}

	return &resp, nil{{end}}
}

{{end}}
`
